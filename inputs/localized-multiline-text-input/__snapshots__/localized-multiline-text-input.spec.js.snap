// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rendering other languages should sort them by the relevance 1`] = `
<Horizontal
  constraint="scale"
>
  <Stack
    alignItems="stretch"
    scale="s"
  >
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isCollapsed={true}
      key="en"
      language="en"
      languagesControl={false}
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="en"
    />
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAutofocussed={false}
      isCollapsed={true}
      key="en-GB"
      language="en-GB"
      languagesControl={false}
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="en-GB"
    />
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAutofocussed={false}
      isCollapsed={true}
      key="de"
      language="de"
      languagesControl={false}
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="de"
    />
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAutofocussed={false}
      isCollapsed={true}
      key="fr"
      language="fr"
      languagesControl={false}
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="fr"
    />
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAutofocussed={false}
      isCollapsed={true}
      key="nan-Hant-TW"
      language="nan-Hant-TW"
      languagesControl={false}
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="nan-Hant-TW"
    />
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAutofocussed={false}
      isCollapsed={true}
      key="pt-BR"
      language="pt-BR"
      languagesControl={
        <InjectIntl(LanguagesControl)
          onClick={[Function]}
          remainingLanguages={5}
        />
      }
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="pt-BR"
    />
  </Stack>
</Horizontal>
`;

exports[`rendering when "language toggle" feature is disabled should match snapshot 1`] = `
<Horizontal
  constraint="scale"
>
  <Stack
    alignItems="stretch"
    scale="s"
  >
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isCollapsed={true}
      key="en"
      language="en"
      languagesControl={
        <InjectIntl(LanguagesControl)
          isClosed={true}
          onClick={[Function]}
          remainingLanguages={1}
        />
      }
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="Horse"
    />
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAutofocussed={false}
      isCollapsed={true}
      key="de"
      language="de"
      languagesControl={
        <InjectIntl(LanguagesControl)
          onClick={[Function]}
          remainingLanguages={1}
        />
      }
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="Pferd"
    />
  </Stack>
</Horizontal>
`;

exports[`rendering when all languages are shown by default should match snapshot 1`] = `
<Horizontal
  constraint="scale"
>
  <Stack
    alignItems="stretch"
    scale="s"
  >
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isCollapsed={true}
      key="en"
      language="en"
      languagesControl={false}
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="Horse"
    />
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAutofocussed={false}
      isCollapsed={true}
      key="de"
      language="de"
      languagesControl={
        <InjectIntl(LanguagesControl)
          onClick={[Function]}
          remainingLanguages={1}
        />
      }
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="Pferd"
    />
  </Stack>
</Horizontal>
`;

exports[`rendering when autofocus is activated should match snapshot 1`] = `
<Horizontal
  constraint="scale"
>
  <Stack
    alignItems="stretch"
    scale="s"
  >
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAutofocussed={true}
      isCollapsed={true}
      key="en"
      language="en"
      languagesControl={false}
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="Horse"
    />
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAutofocussed={false}
      isCollapsed={true}
      key="de"
      language="de"
      languagesControl={
        <InjectIntl(LanguagesControl)
          onClick={[Function]}
          remainingLanguages={1}
        />
      }
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="Pferd"
    />
  </Stack>
</Horizontal>
`;

exports[`rendering when disabled should match snapshot 1`] = `
<Horizontal
  constraint="scale"
>
  <Stack
    alignItems="stretch"
    scale="s"
  >
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isCollapsed={true}
      isDisabled={true}
      key="en"
      language="en"
      languagesControl={false}
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="Horse"
    />
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAutofocussed={false}
      isCollapsed={true}
      isDisabled={true}
      key="de"
      language="de"
      languagesControl={
        <InjectIntl(LanguagesControl)
          onClick={[Function]}
          remainingLanguages={1}
        />
      }
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="Pferd"
    />
  </Stack>
</Horizontal>
`;

exports[`rendering when every field should display an error should match snapshot 1`] = `
<Horizontal
  constraint="scale"
>
  <Stack
    alignItems="stretch"
    scale="s"
  >
    <TranslationInput
      hasError={true}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isCollapsed={true}
      key="en"
      language="en"
      languagesControl={
        <InjectIntl(LanguagesControl)
          isClosed={true}
          onClick={[Function]}
          remainingLanguages={1}
        />
      }
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="Horse"
    />
  </Stack>
</Horizontal>
`;

exports[`rendering when in read-only mode should match snapshot 1`] = `
<Horizontal
  constraint="scale"
>
  <Stack
    alignItems="stretch"
    scale="s"
  >
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isCollapsed={true}
      isReadOnly={true}
      key="en"
      language="en"
      languagesControl={false}
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="Horse"
    />
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAutofocussed={false}
      isCollapsed={true}
      isReadOnly={true}
      key="de"
      language="de"
      languagesControl={
        <InjectIntl(LanguagesControl)
          onClick={[Function]}
          remainingLanguages={1}
        />
      }
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="Pferd"
    />
  </Stack>
</Horizontal>
`;

exports[`rendering when placeholders are provided should match snapshot 1`] = `
<Horizontal
  constraint="scale"
>
  <Stack
    alignItems="stretch"
    scale="s"
  >
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isCollapsed={true}
      key="en"
      language="en"
      languagesControl={false}
      onChange={[MockFunction]}
      onToggle={[Function]}
      placeholder="Value"
      value="Horse"
    />
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAutofocussed={false}
      isCollapsed={true}
      key="de"
      language="de"
      languagesControl={
        <InjectIntl(LanguagesControl)
          onClick={[Function]}
          remainingLanguages={1}
        />
      }
      onChange={[MockFunction]}
      onToggle={[Function]}
      placeholder="Wert"
      value="Pferd"
    />
  </Stack>
</Horizontal>
`;

exports[`rendering when there is an error on a specific field should match snapshot 1`] = `
<Horizontal
  constraint="scale"
>
  <Stack
    alignItems="stretch"
    scale="s"
  >
    <TranslationInput
      hasError={false}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isCollapsed={true}
      key="en"
      language="en"
      languagesControl={false}
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="Horse"
    />
    <TranslationInput
      error={
        <div>
          Specific Error
        </div>
      }
      hasError={true}
      horizontalConstraint="scale"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAutofocussed={false}
      isCollapsed={true}
      key="de"
      language="de"
      languagesControl={
        <InjectIntl(LanguagesControl)
          onClick={[Function]}
          remainingLanguages={1}
        />
      }
      onChange={[MockFunction]}
      onToggle={[Function]}
      value="Pferd"
    />
  </Stack>
</Horizontal>
`;
